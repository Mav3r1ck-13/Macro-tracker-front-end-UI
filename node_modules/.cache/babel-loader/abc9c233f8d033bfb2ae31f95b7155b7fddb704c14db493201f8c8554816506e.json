{"ast":null,"code":"import Vue from 'vue';\nimport Router from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\nimport LoginView from '../views/LoginView.vue';\nimport LogoutView from '../views/LogoutView.vue';\nimport RegisterView from '../views/RegisterView.vue';\nimport store from '../store/index';\nVue.use(Router);\n\n/**\r\n * The Vue Router is used to \"direct\" the browser to render a specific view component\r\n * inside of App.vue depending on the URL.\r\n *\r\n * It also is used to detect whether or not a route requires the user to have first authenticated.\r\n * If the user has not yet authenticated (and needs to) they are redirected to /login\r\n * If they have (or don't need to) they're allowed to go about their way.\r\n */\n\nconst router = new Router({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes: [{\n    path: '/',\n    name: 'home',\n    component: HomeView,\n    meta: {\n      requiresAuth: true\n    }\n  }, {\n    path: \"/login\",\n    name: \"login\",\n    component: LoginView,\n    meta: {\n      requiresAuth: false\n    }\n  }, {\n    path: \"/logout\",\n    name: \"logout\",\n    component: LogoutView,\n    meta: {\n      requiresAuth: false\n    }\n  }, {\n    path: \"/register\",\n    name: \"register-page\",\n    component: RegisterView,\n    meta: {\n      requiresAuth: false\n    }\n  }]\n});\nrouter.beforeEach((to, from, next) => {\n  // Determine if the route requires Authentication\n  const requiresAuth = to.matched.some(x => x.meta.requiresAuth);\n\n  // If it does and they are not logged in, send the user to \"/login\"\n  if (requiresAuth && store.state.token === '') {\n    next(\"/login\");\n  } else {\n    // Else let them go to their next destination\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","Router","HomeView","LoginView","LogoutView","RegisterView","store","use","router","mode","base","process","env","BASE_URL","routes","path","name","component","meta","requiresAuth","beforeEach","to","from","next","matched","some","x","state","token"],"sources":["C:/Users/angie/OneDrive/Desktop/Macro-tracker-front-end-UI/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport Router from 'vue-router'\r\nimport HomeView from '../views/HomeView.vue'\r\nimport LoginView from '../views/LoginView.vue'\r\nimport LogoutView from '../views/LogoutView.vue'\r\nimport RegisterView from '../views/RegisterView.vue'\r\nimport store from '../store/index'\r\n\r\nVue.use(Router)\r\n\r\n/**\r\n * The Vue Router is used to \"direct\" the browser to render a specific view component\r\n * inside of App.vue depending on the URL.\r\n *\r\n * It also is used to detect whether or not a route requires the user to have first authenticated.\r\n * If the user has not yet authenticated (and needs to) they are redirected to /login\r\n * If they have (or don't need to) they're allowed to go about their way.\r\n */\r\n\r\nconst router = new Router({\r\n  mode: 'history',\r\n  base: process.env.BASE_URL,\r\n  routes: [\r\n    {\r\n      path: '/',\r\n      name: 'home',\r\n      component: HomeView,\r\n      meta: {\r\n        requiresAuth: true\r\n      }\r\n    },\r\n    {\r\n      path: \"/login\",\r\n      name: \"login\",\r\n      component: LoginView,\r\n      meta: {\r\n        requiresAuth: false\r\n      }\r\n    },\r\n    {\r\n      path: \"/logout\",\r\n      name: \"logout\",\r\n      component: LogoutView,\r\n      meta: {\r\n        requiresAuth: false\r\n      }\r\n    },\r\n    {\r\n      path: \"/register\",\r\n      name: \"register-page\",\r\n      component: RegisterView,\r\n      meta: {\r\n        requiresAuth: false\r\n      }\r\n    }\r\n  ]\r\n})\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n  // Determine if the route requires Authentication\r\n  const requiresAuth = to.matched.some(x => x.meta.requiresAuth);\r\n\r\n  // If it does and they are not logged in, send the user to \"/login\"\r\n  if (requiresAuth && store.state.token === '') {\r\n    next(\"/login\");\r\n  } else {\r\n    // Else let them go to their next destination\r\n    next();\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,MAAM,MAAM,YAAY;AAC/B,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,KAAK,MAAM,gBAAgB;AAElCN,GAAG,CAACO,GAAG,CAACN,MAAM,CAAC;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMO,MAAM,GAAG,IAAIP,MAAM,CAAC;EACxBQ,IAAI,EAAE,SAAS;EACfC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAC1BC,MAAM,EAAE,CACN;IACEC,IAAI,EAAE,GAAG;IACTC,IAAI,EAAE,MAAM;IACZC,SAAS,EAAEf,QAAQ;IACnBgB,IAAI,EAAE;MACJC,YAAY,EAAE;IAChB;EACF,CAAC,EACD;IACEJ,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,OAAO;IACbC,SAAS,EAAEd,SAAS;IACpBe,IAAI,EAAE;MACJC,YAAY,EAAE;IAChB;EACF,CAAC,EACD;IACEJ,IAAI,EAAE,SAAS;IACfC,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAEb,UAAU;IACrBc,IAAI,EAAE;MACJC,YAAY,EAAE;IAChB;EACF,CAAC,EACD;IACEJ,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,eAAe;IACrBC,SAAS,EAAEZ,YAAY;IACvBa,IAAI,EAAE;MACJC,YAAY,EAAE;IAChB;EACF,CAAC;AAEL,CAAC,CAAC;AAEFX,MAAM,CAACY,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA,MAAMJ,YAAY,GAAGE,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,IAAI,CAACC,YAAY,CAAC;;EAE9D;EACA,IAAIA,YAAY,IAAIb,KAAK,CAACqB,KAAK,CAACC,KAAK,KAAK,EAAE,EAAE;IAC5CL,IAAI,CAAC,QAAQ,CAAC;EAChB,CAAC,MAAM;IACL;IACAA,IAAI,EAAE;EACR;AACF,CAAC,CAAC;AAEF,eAAef,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}